input {
  # File input for batch processing
  file {
    path => "/usr/share/logstash/data/*.jsonl"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "city_traffic_file"
  }
  
  # HTTP input for real-time data ingestion
  http {
    port => 5000
    codec => "json"
    type => "city_traffic_http"
  }
  
  # Beats input for Filebeat integration
  beats {
    port => 5044
    type => "city_traffic_beats"
  }
}

filter {
  if [type] == "city_traffic_file" or [type] == "city_traffic_http" or [type] == "city_traffic_beats" {
    
    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Add processing metadata
    mutate {
      add_field => {
        "processed_at" => "%{@timestamp}"
        "data_source" => "%{type}"
      }
    }
    
    # Geo-point mapping for Elasticsearch - create proper geo_point array
    ruby {
      code => '
        lon = event.get("[location][lon]")
        lat = event.get("[location][lat]")
        if lon and lat
          event.set("[location][coordinates]", [lon.to_f, lat.to_f])
        end
      '
    }
    
    # Enrich with time-based fields
    ruby {
      code => '
        require "time"
        begin
          timestamp = Time.parse(event.get("timestamp"))
          event.set("hour_of_day", timestamp.hour)
          event.set("day_of_week", timestamp.strftime("%A"))
          event.set("month", timestamp.strftime("%B"))
          event.set("is_rush_hour", [7,8,17,18].include?(timestamp.hour))
        rescue => e
          event.set("hour_of_day", 0)
          event.set("day_of_week", "Unknown")
          event.set("month", "Unknown")
          event.set("is_rush_hour", false)
        end
      '
    }
    
    # Add traffic severity score
    ruby {
      code => '
        congestion = event.get("[traffic_data][congestion_level]")
        vehicle_count = event.get("[traffic_data][vehicle_count]")
        
        severity_score = case congestion
        when "low" then 1
        when "medium" then 2
        when "high" then 3
        when "severe" then 4
        else 1
        end
        
        # Adjust based on vehicle count
        if vehicle_count > 150
          severity_score += 1
        elsif vehicle_count > 100
          severity_score += 0.5
        end
        
        event.set("traffic_severity_score", severity_score)
      '
    }
    
    # Weather impact on traffic
    if [weather][conditions] == "rainy" or [weather][conditions] == "snowy" {
      mutate {
        add_field => {
          "weather_impact" => "adverse"
          "speed_reduction_factor" => "0.7"
        }
      }
    } else if [weather][conditions] == "foggy" {
      mutate {
        add_field => {
          "weather_impact" => "moderate"
          "speed_reduction_factor" => "0.8"
        }
      }
    } else {
      mutate {
        add_field => {
          "weather_impact" => "minimal"
          "speed_reduction_factor" => "1.0"
        }
      }
    }
    
    # Remove sensitive or unnecessary fields
    mutate {
      remove_field => [ "metadata" ]
    }
  }
}

output {
  if [type] == "city_traffic_file" or [type] == "city_traffic_http" or [type] == "city_traffic_beats" {
    
    # Output to Elasticsearch
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "city_traffic-%{+YYYY.MM.dd}"
      action => "index"
      
      # Mapping template
      template_name => "city_traffic_template"
      template => "/usr/share/logstash/templates/city_traffic_template.json"
    }
    
    # Optional: Output to console for debugging
    if [@metadata][debug] == "true" {
      stdout {
        codec => rubydebug
      }
    }
  }
}
